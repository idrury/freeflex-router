"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  BasejumpUserSession: () => BasejumpUserSession,
  SignedIn: () => SignedIn,
  SignedOut: () => SignedOut,
  useAccount: () => useAccount,
  useAccountBillingStatus: () => useAccountBillingStatus,
  useAccountBySlug: () => useAccountBySlug,
  useAccountInvitationLookup: () => useAccountInvitationLookup,
  useAccountInvitations: () => useAccountInvitations,
  useAccountMembers: () => useAccountMembers,
  useAccounts: () => useAccounts,
  useBasejumpClient: () => useBasejumpClient,
  useBasejumpProvider: () => useBasejumpProvider,
  useBasejumpSession: () => useBasejumpSession,
  useBillingPlans: () => useBillingPlans,
  usePersonalAccount: () => usePersonalAccount
});
module.exports = __toCommonJS(src_exports);

// src/hooks/use-accounts.ts
var import_swr = __toESM(require("swr"));
var useAccounts = (supabaseClient, options) => {
  return (0, import_swr.default)(
    !!supabaseClient && ["accounts"],
    () => __async(void 0, null, function* () {
      const { data, error } = yield supabaseClient.rpc("get_accounts");
      if (error) {
        throw new Error(error.message);
      }
      return data;
    }),
    options
  );
};

// src/hooks/use-account.ts
var import_swr2 = __toESM(require("swr"));
var useAccount = (supabaseClient, accountId, options) => {
  return (0, import_swr2.default)(
    !!supabaseClient && !!accountId && ["account", accountId],
    () => __async(void 0, null, function* () {
      const { data, error } = yield supabaseClient.rpc("get_account", {
        account_id: accountId
      });
      if (error) {
        throw new Error(error.message);
      }
      return data;
    }),
    options
  );
};

// src/hooks/use-account-by-slug.ts
var import_swr3 = __toESM(require("swr"));
var useAccountBySlug = (supabaseClient, accountSlug, options) => {
  return (0, import_swr3.default)(
    !!supabaseClient && !!accountSlug && ["account", accountSlug],
    () => __async(void 0, null, function* () {
      const { data, error } = yield supabaseClient.rpc("get_account_by_slug", {
        slug: accountSlug
      });
      if (error) {
        throw new Error(error.message);
      }
      return data;
    }),
    options
  );
};

// src/hooks/use-personal-account.ts
var import_swr4 = __toESM(require("swr"));
var usePersonalAccount = (supabaseClient, options) => {
  return (0, import_swr4.default)(
    ["personal-account"],
    () => __async(void 0, null, function* () {
      const { data, error } = yield supabaseClient.rpc("get_personal_account");
      if (error) {
        throw new Error(error.message);
      }
      return data;
    }),
    options
  );
};

// src/hooks/use-account-members.ts
var import_swr5 = __toESM(require("swr"));
var useAccountMembers = (supabaseClient, accountId, options) => {
  return (0, import_swr5.default)(
    !!supabaseClient && !!accountId && ["account-members", accountId],
    () => __async(void 0, null, function* () {
      const { data, error } = yield supabaseClient.rpc("get_account_members", {
        account_id: accountId
      });
      if (error) {
        throw new Error(error.message);
      }
      return data;
    }),
    options
  );
};

// src/hooks/use-account-invitations.ts
var import_swr6 = __toESM(require("swr"));
var useAccountInvitations = (supabaseClient, accountId, options) => {
  return (0, import_swr6.default)(
    !!supabaseClient && !!accountId && ["account-invitations", accountId],
    () => __async(void 0, null, function* () {
      const { data, error } = yield supabaseClient.rpc(
        "get_account_invitations",
        {
          account_id: accountId
        }
      );
      if (error) {
        throw new Error(error.message);
      }
      return data;
    }),
    options
  );
};

// src/hooks/use-account-invitation-lookup.ts
var import_swr7 = __toESM(require("swr"));
var useAccountInvitationLookup = (supabaseClient, token, options) => {
  return (0, import_swr7.default)(
    !!supabaseClient && !!token && ["account-invitation-lookup", token],
    () => __async(void 0, null, function* () {
      const { data, error } = yield supabaseClient.rpc("lookup_invitation", {
        lookup_invitation_token: token
      });
      if (error) {
        throw new Error(error.message);
      }
      return data;
    }),
    options
  );
};

// src/hooks/use-account-billing-status.ts
var import_swr8 = __toESM(require("swr"));
var useAccountBillingStatus = (supabaseClient, accountId, options) => {
  return (0, import_swr8.default)(
    !!supabaseClient && !!accountId && ["account-billing-status", accountId],
    () => __async(void 0, null, function* () {
      const { data, error } = yield supabaseClient.functions.invoke(
        "billing-functions",
        {
          body: {
            action: "get_billing_status",
            args: {
              account_id: accountId
            }
          }
        }
      );
      if (error) {
        throw new Error(error.message);
      }
      return data;
    }),
    options
  );
};

// src/hooks/use-billing-plans.ts
var import_swr9 = __toESM(require("swr"));
var useBillingPlans = (supabaseClient, accountId, options) => {
  return (0, import_swr9.default)(
    !!supabaseClient && ["billing-plans", accountId],
    () => __async(void 0, null, function* () {
      if (!supabaseClient) {
        throw new Error("Client not yet loaded");
      }
      const { data, error } = yield supabaseClient.functions.invoke(
        "billing-functions",
        {
          body: {
            action: "get_plans",
            args: {
              account_id: accountId
            }
          }
        }
      );
      if (error) {
        throw new Error(error.message);
      }
      return data;
    }),
    options
  );
};

// src/components/basejump-user-session.tsx
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var BasejumpContext = (0, import_react.createContext)({
  supabaseClient: null,
  loading: true,
  error: null,
  session: null
});
var BasejumpUserSession = ({
  supabaseClient,
  children
}) => {
  const [session, setSession] = (0, import_react.useState)(null);
  const [loading, setIsLoading] = (0, import_react.useState)(true);
  const [error, setError] = (0, import_react.useState)(null);
  (0, import_react.useEffect)(() => {
    let mounted = true;
    function getSession() {
      return __async(this, null, function* () {
        const {
          data: { session: session2 },
          error: error2
        } = yield supabaseClient.auth.getSession();
        if (mounted) {
          if (error2) {
            setError(error2);
            setIsLoading(false);
            return;
          }
          setSession(session2);
          setIsLoading(false);
        }
      });
    }
    getSession();
    return () => {
      mounted = false;
    };
  }, []);
  (0, import_react.useEffect)(() => {
    const {
      data: { subscription }
    } = supabaseClient.auth.onAuthStateChange((event, session2) => {
      if (session2 && (event === "SIGNED_IN" || event === "TOKEN_REFRESHED")) {
        setSession(session2);
      }
      if (event === "SIGNED_OUT") {
        setSession(null);
      }
    });
    return () => {
      subscription.unsubscribe();
    };
  }, []);
  const providerValue = (0, import_react.useMemo)(() => {
    if (loading) {
      return {
        loading: true,
        session: null,
        error: null,
        supabaseClient
      };
    }
    if (error) {
      return {
        loading: false,
        session: null,
        error,
        supabaseClient
      };
    }
    return {
      loading: false,
      session,
      error: null,
      supabaseClient
    };
  }, [loading, session, error]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(BasejumpContext.Provider, { value: providerValue, children });
};
var useBasejumpClient = () => {
  const context = (0, import_react.useContext)(BasejumpContext);
  if (context === void 0) {
    throw new Error(
      "useBasejumpClient must be used within a BasejumpUserSession"
    );
  }
  return context == null ? void 0 : context.supabaseClient;
};
var useBasejumpSession = () => {
  const context = (0, import_react.useContext)(BasejumpContext);
  if (context === void 0) {
    throw new Error(
      "useBasejumpSession must be used within a BasejumpUserSession"
    );
  }
  return context == null ? void 0 : context.session;
};
var useBasejumpProvider = () => {
  const context = (0, import_react.useContext)(BasejumpContext);
  if (context === void 0) {
    throw new Error(
      "useBasejumpClient must be used within a BasejumpUserSession"
    );
  }
  return context;
};

// src/components/signed-out.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var SignedOut = ({ children }) => {
  const session = useBasejumpSession();
  return !!session ? null : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, { children });
};

// src/components/signed-in.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
var SignedIn = ({ children }) => {
  const session = useBasejumpSession();
  return !!session ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_jsx_runtime3.Fragment, { children }) : null;
};

// src/index.tsx
__reExport(src_exports, require("@usebasejump/shared"), module.exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BasejumpUserSession,
  SignedIn,
  SignedOut,
  useAccount,
  useAccountBillingStatus,
  useAccountBySlug,
  useAccountInvitationLookup,
  useAccountInvitations,
  useAccountMembers,
  useAccounts,
  useBasejumpClient,
  useBasejumpProvider,
  useBasejumpSession,
  useBillingPlans,
  usePersonalAccount,
  ...require("@usebasejump/shared")
});
//# sourceMappingURL=index.js.map