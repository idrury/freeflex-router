{"version":3,"sources":["../src/index.tsx","../src/hooks/use-accounts.ts","../src/hooks/use-account.ts","../src/hooks/use-account-by-slug.ts","../src/hooks/use-personal-account.ts","../src/hooks/use-account-members.ts","../src/hooks/use-account-invitations.ts","../src/hooks/use-account-invitation-lookup.ts","../src/hooks/use-account-billing-status.ts","../src/hooks/use-billing-plans.ts","../src/components/basejump-user-session.tsx","../src/components/signed-out.tsx","../src/components/signed-in.tsx"],"sourcesContent":["/**\n * Convenience functions\n */\nexport * from \"./hooks/use-accounts\";\nexport * from \"./hooks/use-account\";\nexport * from \"./hooks/use-account-by-slug\";\nexport * from \"./hooks/use-personal-account\";\nexport * from \"./hooks/use-account-members\";\nexport * from \"./hooks/use-account-invitations\";\nexport * from \"./hooks/use-account-invitation-lookup\";\nexport * from \"./hooks/use-account-billing-status\";\nexport * from \"./hooks/use-billing-plans\";\nexport * from \"./components/basejump-user-session\";\nexport * from \"./components/signed-out\";\nexport * from \"./components/signed-in\";\n\nexport * from \"@usebasejump/shared\";","import {SupabaseClient} from \"@supabase/supabase-js\";\nimport {GetAccountsResponse} from \"@usebasejump/shared\";\nimport useSWR, {SWRConfiguration} from \"swr\";\n\nexport const useAccounts = (supabaseClient: SupabaseClient, options?: SWRConfiguration) => {\n    return useSWR<GetAccountsResponse>(\n        !!supabaseClient && [\"accounts\"],\n        async () => {\n            const {data, error} = await supabaseClient.rpc(\"get_accounts\");\n\n            if (error) {\n                throw new Error(error.message);\n            }\n\n            return data;\n        },\n        options\n    );\n};\n","import {SupabaseClient} from \"@supabase/supabase-js\";\nimport {GetAccountResponse} from \"@usebasejump/shared\";\nimport useSWR, {SWRConfiguration} from \"swr\";\n\nexport const useAccount = (supabaseClient: SupabaseClient, accountId: string, options?: SWRConfiguration) => {\n    return useSWR<GetAccountResponse>(\n        !!supabaseClient && !!accountId && [\"account\", accountId],\n        async () => {\n            const {data, error} = await supabaseClient.rpc(\"get_account\", {\n                account_id: accountId,\n            });\n\n            if (error) {\n                throw new Error(error.message);\n            }\n\n            return data;\n        }, options);\n};\n","import {SupabaseClient} from \"@supabase/supabase-js\";\nimport {GetAccountResponse} from \"@usebasejump/shared\";\nimport useSWR, {SWRConfiguration} from \"swr\";\n\nexport const useAccountBySlug = (supabaseClient: SupabaseClient, accountSlug: string, options?: SWRConfiguration) => {\n    return useSWR<GetAccountResponse>(\n        !!supabaseClient && !!accountSlug && [\"account\", accountSlug],\n        async () => {\n            const {data, error} = await supabaseClient.rpc(\"get_account_by_slug\", {\n                slug: accountSlug,\n            });\n\n            if (error) {\n                throw new Error(error.message);\n            }\n\n            return data;\n        }, options);\n};\n","import {SupabaseClient} from \"@supabase/supabase-js\";\nimport {GetAccountResponse} from \"@usebasejump/shared\";\nimport useSWR, {SWRConfiguration} from \"swr\";\n\nexport const usePersonalAccount = (supabaseClient: SupabaseClient, options?: SWRConfiguration) => {\n    return useSWR<GetAccountResponse>(\n        [\"personal-account\"],\n        async () => {\n            const {data, error} = await supabaseClient.rpc(\"get_personal_account\");\n\n            if (error) {\n                throw new Error(error.message);\n            }\n            return data;\n        },\n        options,\n    );\n};\n","import {SupabaseClient} from \"@supabase/supabase-js\";\nimport {GetAccountMembersResponse} from \"@usebasejump/shared\";\nimport useSWR, {SWRConfiguration} from \"swr\";\n\nexport const useAccountMembers = (supabaseClient: SupabaseClient, accountId: string, options?: SWRConfiguration) => {\n    return useSWR<GetAccountMembersResponse>(\n        !!supabaseClient && !!accountId && [\"account-members\", accountId],\n        async () => {\n            const {data, error} = await supabaseClient.rpc(\"get_account_members\", {\n                account_id: accountId,\n            });\n\n            if (error) {\n                throw new Error(error.message);\n            }\n\n            return data;\n        },\n        options\n    );\n};\n","import {SupabaseClient} from \"@supabase/supabase-js\";\nimport {GetAccountInvitesResponse} from \"@usebasejump/shared\";\nimport useSWR, {SWRConfiguration} from \"swr\";\n\nexport const useAccountInvitations = (supabaseClient: SupabaseClient, accountId: string, options?: SWRConfiguration) => {\n    return useSWR<GetAccountInvitesResponse>(\n        !!supabaseClient && !!accountId && [\"account-invitations\", accountId],\n        async () => {\n            const {data, error} = await supabaseClient.rpc(\n                \"get_account_invitations\",\n                {\n                    account_id: accountId,\n                }\n            );\n\n            if (error) {\n                throw new Error(error.message);\n            }\n\n            return data;\n        },\n        options\n    );\n};\n","import {SupabaseClient} from \"@supabase/supabase-js\";\nimport {LookupInvitationResponse} from \"@usebasejump/shared\";\nimport useSWR, {SWRConfiguration} from \"swr\";\n\nexport const useAccountInvitationLookup = (supabaseClient: SupabaseClient, token: string, options?: SWRConfiguration) => {\n    return useSWR<LookupInvitationResponse>(\n        !!supabaseClient && !!token && [\"account-invitation-lookup\", token],\n        async () => {\n            const {data, error} = await supabaseClient.rpc(\"lookup_invitation\", {\n                lookup_invitation_token: token,\n            });\n\n            if (error) {\n                throw new Error(error.message);\n            }\n\n            return data;\n        },\n        options);\n};\n","import {SupabaseClient} from \"@supabase/supabase-js\";\nimport {GetAccountBillingStatusResponse} from \"@usebasejump/shared\";\nimport useSWR, {SWRConfiguration} from \"swr\";\n\nexport const useAccountBillingStatus = (supabaseClient: SupabaseClient, accountId: string, options?: SWRConfiguration) => {\n    return useSWR<GetAccountBillingStatusResponse>(\n        !!supabaseClient && !!accountId && ['account-billing-status', accountId],\n        async () => {\n            const {data, error} = await supabaseClient.functions.invoke(\n                \"billing-functions\",\n                {\n                    body: {\n                        action: \"get_billing_status\",\n                        args: {\n                            account_id: accountId,\n                        },\n                    },\n                }\n            );\n\n            if (error) {\n                throw new Error(error.message);\n            }\n\n            return data;\n        },\n        options);\n};\n","import {SupabaseClient} from \"@supabase/supabase-js\";\nimport {GetBillingPlansResponse} from \"@usebasejump/shared\";\nimport useSWR, {SWRConfiguration} from \"swr\";\n\nexport const useBillingPlans = (supabaseClient: SupabaseClient, accountId?: string, options?: SWRConfiguration) => {\n    return useSWR<GetBillingPlansResponse>(\n        !!supabaseClient && [\"billing-plans\", accountId],\n        async () => {\n            if (!supabaseClient) {\n                throw new Error(\"Client not yet loaded\");\n            }\n\n            const {data, error} = await supabaseClient.functions.invoke(\n                \"billing-functions\",\n                {\n                    body: {\n                        action: \"get_plans\",\n                        args: {\n                            account_id: accountId,\n                        },\n                    },\n                }\n            );\n\n            if (error) {\n                throw new Error(error.message);\n            }\n\n            return data;\n        },\n        options\n    );\n};\n","\"use client\";\n\nimport {createContext, ReactNode, useContext, useEffect, useMemo, useState} from \"react\";\nimport {AuthError, Session, SupabaseClient} from \"@supabase/supabase-js\";\n\ntype Props = {\n  supabaseClient: SupabaseClient;\n  children: ReactNode;\n};\n\ntype BASEJUMP_PROVIDER = {\n  supabaseClient: SupabaseClient | null;\n  loading: boolean;\n  error: AuthError | null;\n  session: null | Session;\n};\nconst BasejumpContext = createContext<BASEJUMP_PROVIDER | null>({\n  supabaseClient: null,\n  loading: true,\n  error: null,\n  session: null,\n});\n\nexport const BasejumpUserSession = ({\n  supabaseClient,\n  children\n}: Props) => {\n  const [session, setSession] = useState<null | Session>(null);\n  const [loading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<AuthError | null>(null);\n\n  useEffect(() => {\n    let mounted = true;\n\n    async function getSession() {\n      const {\n        data: { session },\n        error,\n      } = await supabaseClient.auth.getSession();\n\n      // only update the react state if the component is still mounted\n      if (mounted) {\n        if (error) {\n          setError(error);\n          setIsLoading(false);\n          return;\n        }\n\n        setSession(session);\n        setIsLoading(false);\n      }\n    }\n\n    getSession();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    const {\n      data: { subscription },\n    } = supabaseClient.auth.onAuthStateChange((event, session) => {\n      if (session && (event === \"SIGNED_IN\" || event === \"TOKEN_REFRESHED\")) {\n        setSession(session);\n      }\n\n      if (event === \"SIGNED_OUT\") {\n        setSession(null);\n      }\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const providerValue: BASEJUMP_PROVIDER = useMemo(() => {\n    if (loading) {\n      return {\n        loading: true,\n        session: null,\n        error: null,\n        supabaseClient\n      };\n    }\n\n    if (error) {\n      return {\n        loading: false,\n        session: null,\n        error,\n        supabaseClient\n      };\n    }\n\n    return {\n      loading: false,\n      session,\n      error: null,\n      supabaseClient\n    };\n  }, [loading, session, error]);\n\n  return (\n    <BasejumpContext.Provider value={providerValue}>\n      {children}\n    </BasejumpContext.Provider>\n  );\n};\n\nexport const useBasejumpClient = () => {\n  const context = useContext(BasejumpContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useBasejumpClient must be used within a BasejumpUserSession\"\n    );\n  }\n  return context?.supabaseClient;\n};\n\nexport const useBasejumpSession = () => {\n  const context = useContext(BasejumpContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useBasejumpSession must be used within a BasejumpUserSession\"\n    );\n  }\n  return context?.session;\n};\n\nexport const useBasejumpProvider = () => {\n  const context = useContext(BasejumpContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useBasejumpClient must be used within a BasejumpUserSession\"\n    );\n  }\n  return context;\n};\n","import {useBasejumpSession} from \"./basejump-user-session\";\nimport {ReactNode} from \"react\";\n\ntype Props = {\n    children: ReactNode;\n}\n/**\n * This component will only render its children if the user is logged out.\n * @param children\n */\nexport const SignedOut = ({children}: Props) => {\n    const session = useBasejumpSession();\n\n    return !!session ? null : <>{children}</>;\n}\n","'use client'\n\nimport {useBasejumpSession} from \"./basejump-user-session\";\nimport {ReactNode} from \"react\";\n\ntype Props = {\n    children: ReactNode;\n}\n\n/**\n * This component will only render its children if the user is signed in.\n * @param children\n */\nexport const SignedIn = ({children}: Props) => {\n    const session = useBasejumpSession();\n\n    return !!session ? <>{children}</> : null;\n}\n"],"mappings":"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","names":["useSWR","import_swr","useSWR","import_swr","useSWR","import_swr","useSWR","import_swr","useSWR","import_swr","useSWR","import_swr","useSWR","import_swr","useSWR","import_swr","useSWR","session","error","import_jsx_runtime","import_jsx_runtime"]}