import * as swr__internal from 'swr/_internal';
import { SupabaseClient, Session, AuthError } from '@supabase/supabase-js';
import { GetAccountsResponse, GetAccountResponse, GetAccountMembersResponse, GetAccountInvitesResponse, LookupInvitationResponse, GetAccountBillingStatusResponse, GetBillingPlansResponse } from '@usebasejump/shared';
export * from '@usebasejump/shared';
import { SWRConfiguration } from 'swr';
import * as react_jsx_runtime from 'react/jsx-runtime';
import { ReactNode } from 'react';

declare const useAccounts: (supabaseClient: SupabaseClient, options?: SWRConfiguration) => swr__internal.SWRResponse<GetAccountsResponse, any, Partial<swr__internal.PublicConfiguration<GetAccountsResponse, any, ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<GetAccountsResponse>) | ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<GetAccountsResponse>)>> | undefined>;

declare const useAccount: (supabaseClient: SupabaseClient, accountId: string, options?: SWRConfiguration) => swr__internal.SWRResponse<GetAccountResponse, any, Partial<swr__internal.PublicConfiguration<GetAccountResponse, any, ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<GetAccountResponse>) | ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<GetAccountResponse>)>> | undefined>;

declare const useAccountBySlug: (supabaseClient: SupabaseClient, accountSlug: string, options?: SWRConfiguration) => swr__internal.SWRResponse<GetAccountResponse, any, Partial<swr__internal.PublicConfiguration<GetAccountResponse, any, ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<GetAccountResponse>) | ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<GetAccountResponse>)>> | undefined>;

declare const usePersonalAccount: (supabaseClient: SupabaseClient, options?: SWRConfiguration) => swr__internal.SWRResponse<GetAccountResponse, any, Partial<swr__internal.PublicConfiguration<GetAccountResponse, any, ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<GetAccountResponse>) | ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<GetAccountResponse>)>> | undefined>;

declare const useAccountMembers: (supabaseClient: SupabaseClient, accountId: string, options?: SWRConfiguration) => swr__internal.SWRResponse<GetAccountMembersResponse, any, Partial<swr__internal.PublicConfiguration<GetAccountMembersResponse, any, ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<GetAccountMembersResponse>) | ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<GetAccountMembersResponse>)>> | undefined>;

declare const useAccountInvitations: (supabaseClient: SupabaseClient, accountId: string, options?: SWRConfiguration) => swr__internal.SWRResponse<GetAccountInvitesResponse, any, Partial<swr__internal.PublicConfiguration<GetAccountInvitesResponse, any, ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<GetAccountInvitesResponse>) | ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<GetAccountInvitesResponse>)>> | undefined>;

declare const useAccountInvitationLookup: (supabaseClient: SupabaseClient, token: string, options?: SWRConfiguration) => swr__internal.SWRResponse<LookupInvitationResponse, any, Partial<swr__internal.PublicConfiguration<LookupInvitationResponse, any, ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<LookupInvitationResponse>) | ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<LookupInvitationResponse>)>> | undefined>;

declare const useAccountBillingStatus: (supabaseClient: SupabaseClient, accountId: string, options?: SWRConfiguration) => swr__internal.SWRResponse<GetAccountBillingStatusResponse, any, Partial<swr__internal.PublicConfiguration<GetAccountBillingStatusResponse, any, ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<GetAccountBillingStatusResponse>) | ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<GetAccountBillingStatusResponse>)>> | undefined>;

declare const useBillingPlans: (supabaseClient: SupabaseClient, accountId?: string, options?: SWRConfiguration) => swr__internal.SWRResponse<GetBillingPlansResponse, any, Partial<swr__internal.PublicConfiguration<GetBillingPlansResponse, any, ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<GetBillingPlansResponse>) | ((arg: readonly [any, ...unknown[]]) => swr__internal.FetcherResponse<GetBillingPlansResponse>)>> | undefined>;

type Props$2 = {
    supabaseClient: SupabaseClient;
    children: ReactNode;
};
type BASEJUMP_PROVIDER = {
    supabaseClient: SupabaseClient | null;
    loading: boolean;
    error: AuthError | null;
    session: null | Session;
};
declare const BasejumpUserSession: ({ supabaseClient, children }: Props$2) => react_jsx_runtime.JSX.Element;
declare const useBasejumpClient: () => SupabaseClient<any, "public", any> | null | undefined;
declare const useBasejumpSession: () => Session | null | undefined;
declare const useBasejumpProvider: () => BASEJUMP_PROVIDER | null;

type Props$1 = {
    children: ReactNode;
};
/**
 * This component will only render its children if the user is logged out.
 * @param children
 */
declare const SignedOut: ({ children }: Props$1) => react_jsx_runtime.JSX.Element | null;

type Props = {
    children: ReactNode;
};
/**
 * This component will only render its children if the user is signed in.
 * @param children
 */
declare const SignedIn: ({ children }: Props) => react_jsx_runtime.JSX.Element | null;

export { BasejumpUserSession, SignedIn, SignedOut, useAccount, useAccountBillingStatus, useAccountBySlug, useAccountInvitationLookup, useAccountInvitations, useAccountMembers, useAccounts, useBasejumpClient, useBasejumpProvider, useBasejumpSession, useBillingPlans, usePersonalAccount };
